{"version":3,"sources":["components/Home.js","components/Full.js","App.js","index.js"],"names":["Home","_jsx","className","children","_jsxs","Full","calculateTimeLeft","difference","Date","getTime","months","days","hours","minutes","seconds","targetDateObj","currentDateObj","monthsLeft","getMonth","getFullYear","Math","floor","timeLeft","setTimeLeft","useState","useEffect","timer","setInterval","clearInterval","App","gsap","from","opacity","y","duration","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yRAmDeA,MA/CFA,IA4BTC,cAAA,OAAKC,UAAU,iBAAgBC,SAC7BF,cAAA,OAAKC,UAAU,UAASC,SACtBC,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBC,eAAA,MAAAD,SAAA,CAAIF,cAAA,SAAKA,cAAA,SAAKA,cAAA,SAAKA,cAAA,SAAK,4BACxBA,cAAA,KAAAE,SAAG,oDACHC,eAAA,KAAAD,SAAA,CACEF,cAAA,SACAA,cAAA,SACAA,cAAA,UAAAE,SAAQ,UAAc,oBAExBC,eAAA,KAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,cAAkB,6BCqDvBE,MA5FFA,KAaX,MAAMC,EAAoBA,KACxB,MAEMC,EAFa,IAAIC,KAAK,0BAA0BC,WAC1C,IAAID,MAAOC,UAGvB,GAAIF,GAAc,EAChB,MAAO,CAAEG,OAAQ,EAAGC,KAAM,EAAGC,MAAO,EAAGC,QAAS,EAAGC,QAAS,GAI9D,MAAMC,EAAgB,IAAIP,KAAK,iBACzBQ,EAAiB,IAAIR,KAC3B,IAAIS,EAAaF,EAAcG,WAAaF,EAAeE,WAAc,IAAMH,EAAcI,cAAgBH,EAAeG,eAS5H,MAAO,CACLT,OAAQO,EACRN,KAReS,KAAKC,MAAMd,EAAU,OAGJ,GAAbU,EAMnBL,MAAOQ,KAAKC,MAAOd,EAAU,MAAwB,MACrDM,QAASO,KAAKC,MAAOd,EAAU,KAAmB,KAClDO,QAASM,KAAKC,MAAOd,EAAU,IAAkB,KAClD,GAGIe,EAAUC,GAAeC,mBAASlB,KAUzC,OARAmB,qBAAU,KACR,MAAMC,EAAQC,aAAY,KACxBJ,EAAYjB,IAAoB,GAC/B,KAEH,MAAO,IAAMsB,cAAcF,EAAM,GAChC,IAGDtB,eAAA,OAAKF,UAAU,iBAAgBC,SAAA,CAC7BC,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBF,cAAA,MAAAE,SAAI,cACJC,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBC,eAAA,QAAAD,SAAA,CAAOmB,EAASZ,OAAO,aAAc,OACrCN,eAAA,QAAAD,SAAA,CAAOmB,EAASX,KAAK,WAAY,cAGrCV,cAAA,QACAA,cAAA,QAEAG,eAAA,OAAKF,UAAU,WAAUC,SAAA,CACvBF,cAAA,MAAAE,SAAI,YACJC,eAAA,MAAAD,SAAA,CACEC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,aAAiB,sBAE3BC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,aAAiB,oBAE3BC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,aAAiB,sBAE3BC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,aAAiB,sBAE3BC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,cAAkB,iCAE5BC,eAAA,MAAAD,SAAA,CACEF,cAAA,UAAAE,SAAQ,cAAkB,iCAI5B,ECnEK0B,MAhBHA,KACVJ,qBAAU,KAERK,IAAKC,KAAK,aAAc,CAAEC,QAAS,EAAGC,EAAG,GAAIC,SAAU,GAAI,GAC1D,IAGDjC,cAAA,OAAKC,UAAU,gBAAeC,SAC5BC,eAAA,OAAKF,UAAU,aAAYC,SAAA,CAAC,IAC1BF,cAACD,EAAI,IACLC,cAACI,EAAI,UCdb8B,IAASC,OACPnC,cAACoC,IAAMC,WAAU,CAAAnC,SACfF,cAAC4B,EAAG,MAENU,SAASC,eAAe,Q","file":"static/js/main.bfc580e9.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./home.css\";\r\n\r\nconst Home = () => {\r\n  // const textRef = useRef(null);\r\n\r\n  // // Set up the scroll-triggered animations\r\n  // useEffect(() => {\r\n  //   const handleScroll = () => {\r\n  //     const scrollY = window.scrollY; // Get the scroll position\r\n  //     const scaleValue = 1 + scrollY / 500; // Scale based on scroll position\r\n\r\n  //     // Limit the scale value to prevent it from growing too large\r\n  //     const limitedScale = scaleValue > 2 ? 2 : scaleValue;\r\n\r\n  //     // Use GSAP to animate the scale\r\n  //     gsap.to(textRef.current, {\r\n  //       scale: limitedScale,\r\n  //       duration: 0.5,\r\n  //       ease: \"power3.out\",\r\n  //     });\r\n  //   };\r\n\r\n  //   // Add the scroll event listener\r\n  //   window.addEventListener(\"scroll\", handleScroll);\r\n\r\n  //   // Clean up the event listener\r\n  //   return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"content\">\r\n        <div className=\"home-text\">\r\n          <h1><br/><br/><br/><br/>Our Wedding Invitation</h1>\r\n          <p>We are so excited to invite you to our wedding!</p>\r\n          <p>\r\n            <br />\r\n            <br />\r\n            <strong>Date:</strong> June 21, 2025\r\n          </p>\r\n          <p>\r\n            <strong>Location:</strong> Secret Location\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./Full.scss\";\r\n\r\nconst Full = () => {\r\n//   useEffect(() => {\r\n//     gsap.fromTo(\".full-container h1\", {\r\n//       opacity: 0,\r\n//       y: -50,\r\n//     }, {\r\n//       opacity: 1,\r\n//       y: 0,\r\n//       duration: 1,\r\n//       ease: \"power3.out\",\r\n//     });\r\n//   }, []);\r\n\r\n  const calculateTimeLeft = () => {\r\n    const targetDate = new Date(\"June 21, 2025 00:00:00\").getTime();\r\n    const now = new Date().getTime();\r\n    const difference = targetDate - now;\r\n\r\n    if (difference <= 0) {\r\n      return { months: 0, days: 0, hours: 0, minutes: 0, seconds: 0 };\r\n    }\r\n\r\n    // Calculate months remaining\r\n    const targetDateObj = new Date(\"June 21, 2025\");\r\n    const currentDateObj = new Date();\r\n    let monthsLeft = targetDateObj.getMonth() - currentDateObj.getMonth() + (12 * (targetDateObj.getFullYear() - currentDateObj.getFullYear()));\r\n\r\n    // Calculate the difference in days\r\n    const daysLeft = Math.floor(difference / (1000 * 60 * 60 * 24));\r\n\r\n    // Subtract the months' worth of days from the total days\r\n    const daysInMonths = monthsLeft * 30; // Approximate the number of days in a month\r\n    const remainingDays = daysLeft - daysInMonths;\r\n\r\n    return {\r\n      months: monthsLeft,\r\n      days: remainingDays,\r\n      hours: Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n      minutes: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),\r\n      seconds: Math.floor((difference % (1000 * 60)) / 1000),\r\n    };\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"full-container\">\r\n      <div className=\"full-text\">\r\n        <h2>Countdown</h2>\r\n        <div className=\"countdown\">\r\n          <span>{timeLeft.months} Months</span> and \r\n          <span>{timeLeft.days} Days</span> left\r\n        </div>\r\n      </div>\r\n      <b />\r\n      <b />\r\n      {/* Schedule Section */}\r\n      <div className=\"schedule\">\r\n        <h3>Program</h3>\r\n        <ul>\r\n          <li>\r\n            <strong>3:00 PM:</strong> Ceremony Begins\r\n          </li>\r\n          <li>\r\n            <strong>4:00 PM:</strong> Cocktail Hour\r\n          </li>\r\n          <li>\r\n            <strong>5:30 PM:</strong> Dinner & Toasts\r\n          </li>\r\n          <li>\r\n            <strong>7:00 PM:</strong> Dancing & Music\r\n          </li>\r\n          <li>\r\n            <strong>10:00 PM:</strong> Cake Cutting & Final Toast\r\n          </li>\r\n          <li>\r\n            <strong>10:00 PM:</strong> TestTestInvitation\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Full;","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\nimport './App.css';\r\nimport './components/home.css';\r\nimport './components/Full.scss';\r\n\r\nimport Home from './components/Home';\r\nimport Full from './components/Full';\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    // Example of using GSAP for animations\r\n    gsap.from('.home-text', { opacity: 0, y: 50, duration: 1 });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"background\"> {/* This ensures background stays unchanged */}\r\n        <Home />\r\n        <Full />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}